#!/usr/bin/env python3
"""
Script para testar se os webhooks m√∫ltiplos foram resolvidos
"""

import requests
import json
import sys
import time
import base64
import os

def create_test_image():
    """Cria uma imagem de teste simples"""
    # Criar uma imagem JPEG simples (1x1 pixel)
    return base64.b64encode(b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00H\x00H\x00\x00\xff\xdb\x00C\x00\x08\x06\x06\x07\x06\x05\x08\x07\x07\x07\t\t\x08\n\x0c\x14\r\x0c\x0b\x0b\x0c\x19\x12\x13\x0f\x14\x1d\x1a\x1f\x1e\x1d\x1a\x1c\x1c $.\' ",#\x1c\x1c(7),01444\x1f\'9=82<.342\xff\xc0\x00\x11\x08\x00\x01\x00\x01\x01\x01\x11\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x14\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xff\xc4\x00\x14\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00\x3f\x00\xaa\xff\xd9').decode('utf-8')

def test_webhook_multiple_calls():
    """Testa se webhooks m√∫ltiplos s√£o bloqueados"""
    
    print("üß™ Testando preven√ß√£o de webhooks m√∫ltiplos...")
    print(f"üì° Servidor: http://localhost:8002")
    print("-" * 60)
    
    # Limpar cache primeiro
    print("1Ô∏è‚É£ Limpando cache de webhooks...")
    try:
        response = requests.post("http://localhost:8002/webhook-cache/clear", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Cache limpo com sucesso")
        else:
            print(f"‚ùå Erro ao limpar cache: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False
    
    # Verificar status inicial
    print("\n2Ô∏è‚É£ Verificando status inicial do cache...")
    try:
        response = requests.get("http://localhost:8002/webhook-cache/status", timeout=10)
        if response.status_code == 200:
            cache_status = response.json()
            print(f"‚úÖ Cache inicial: {cache_status['total_entries']} entradas")
        else:
            print(f"‚ùå Erro ao verificar cache: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False
    
    # Criar imagem de teste
    test_image = create_test_image()
    
    # Simular m√∫ltiplas chamadas de reconhecimento
    print("\n3Ô∏è‚É£ Simulando m√∫ltiplas chamadas de reconhecimento...")
    
    for i in range(5):
        print(f"   Tentativa {i+1}: Enviando reconhecimento...")
        
        try:
            response = requests.post("http://localhost:8002/reconhecer", 
                                   json={"imagem_base64": test_image},
                                   timeout=10)
            
            if response.status_code in [200, 404, 500]:  # 404/500 s√£o esperados para imagem inv√°lida
                print(f"     ‚úÖ Resposta recebida: {response.status_code}")
                
                # Verificar cache ap√≥s cada tentativa
                cache_response = requests.get("http://localhost:8002/webhook-cache/status", timeout=5)
                if cache_response.status_code == 200:
                    cache_data = cache_response.json()
                    print(f"     üìä Cache: {cache_data['total_entries']} entradas")
                    
                    if cache_data['entries']:
                        for cpf, info in cache_data['entries'].items():
                            print(f"       - CPF {cpf}: enviado h√° {info['seconds_ago']:.1f}s")
            else:
                print(f"     ‚ùå Erro inesperado: {response.status_code}")
                
        except Exception as e:
            print(f"     ‚ùå Erro: {e}")
        
        # Aguardar um pouco entre tentativas
        if i < 4:
            time.sleep(1)
    
    # Verificar status final
    print("\n4Ô∏è‚É£ Verificando status final do cache...")
    try:
        response = requests.get("http://localhost:8002/webhook-cache/status", timeout=10)
        if response.status_code == 200:
            cache_status = response.json()
            print(f"‚úÖ Cache final: {cache_status['total_entries']} entradas")
            
            if cache_status['entries']:
                print("   Entradas no cache:")
                for cpf, info in cache_status['entries'].items():
                    print(f"     - CPF {cpf}: enviado h√° {info['seconds_ago']:.1f}s")
                    print(f"       Pode enviar novamente: {info['can_send_again']}")
        else:
            print(f"‚ùå Erro ao verificar cache: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    return True

def test_consultation_access():
    """Testa acesso √† consulta de cadastros"""
    
    print("\nüìã Testando acesso √† consulta de cadastros...")
    print("-" * 60)
    
    # Testar endpoint correto
    print("1Ô∏è‚É£ Testando endpoint /consulta...")
    try:
        response = requests.get("http://localhost:8002/consulta", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Endpoint /consulta funcionando")
            if "Consulta de Cadastros" in response.text:
                print("‚úÖ Conte√∫do correto detectado")
            else:
                print("‚ö†Ô∏è Conte√∫do inesperado")
        else:
            print(f"‚ùå Erro no endpoint /consulta: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    # Testar endpoint incorreto (que estava causando 404)
    print("\n2Ô∏è‚É£ Testando endpoint /consulta.html (deve dar 404)...")
    try:
        response = requests.get("http://localhost:8002/consulta.html", timeout=10)
        if response.status_code == 404:
            print("‚úÖ Endpoint /consulta.html corretamente retorna 404")
        else:
            print(f"‚ö†Ô∏è Endpoint /consulta.html retornou {response.status_code} (esperado 404)")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    # Testar API de usu√°rios
    print("\n3Ô∏è‚É£ Testando API de usu√°rios...")
    try:
        response = requests.get("http://localhost:8002/usuarios", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API de usu√°rios funcionando: {data['total']} usu√°rios")
        else:
            print(f"‚ùå Erro na API de usu√°rios: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Teste de Webhooks M√∫ltiplos e Consulta")
    print("=" * 60)
    
    # Testar webhooks m√∫ltiplos
    webhook_success = test_webhook_multiple_calls()
    
    # Testar acesso √† consulta
    test_consultation_access()
    
    print("\n" + "=" * 60)
    print("üìã RESUMO DOS TESTES:")
    print(f"   ‚úÖ Webhooks m√∫ltiplos: {'RESOLVIDO' if webhook_success else 'FALHOU'}")
    print(f"   ‚úÖ Consulta de cadastros: VERIFICADA")
    
    if webhook_success:
        print("\nüéâ Sistema funcionando corretamente!")
        print("\nüìñ MELHORIAS IMPLEMENTADAS:")
        print("   ‚Ä¢ Cooldown de 5 segundos no frontend")
        print("   ‚Ä¢ Cache de webhooks no backend (5 minutos)")
        print("   ‚Ä¢ Links corrigidos na p√°gina principal")
        print("   ‚Ä¢ Endpoints de consulta funcionando")
        return 0
    else:
        print("\n‚ùå Alguns testes falharam. Verifique o servidor.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 